name: Django CI-CD

# Controls when the workflow will run
on:
  # Allows you to call this workflow within another workflow
  workflow_call:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggered based on the git event type
  push:
    branches: [master]
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Add in environment variables for the entire "build" job
    env:
      POSTGRES_USER: dic2-git2023
      POSTGRES_PASSWORD: git47
      POSTGRES_HOST: localhost # default host value for the database
      POSTGRES_DB: db
      POSTGRES_PORT: 5432
      DJANGO_SECRET_KEY: test-key-not-good
    services:
      postgres_main:
        image: postgres:12
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    # If you want to test multiple python version(s)
    strategy:
      matrix:
        python-version: ["3.8"] # ["3.8", "3.9", "3.10"]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install requirements
        run: |
          pip install -r requirements.txt
      - name: Format with black
        run: |
         pip install black
         black .
      - name: Lint with flake8
        run: |
         pip install flake8
         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run Tests
        # Step specific environment variables
        # env:
        #   DEBUG: "0"
        #   DJANGO_SECRET_KEY: ${{ env.DJANGO_SECRET_KEY }}
        #   DB_USERNAME: ${{ env.POSTGRES_USER }}
        #   DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        #   DB_HOST: ${{ env.POSTGRES_HOST }}
        #   DB_DATABASE: ${{ env.POSTGRES_DB }}
        #   DB_PORT: ${{ env.POSTGRES_PORT }}
        # run: |
        #   python manage.py test
      # login to Docker Hub using the secrets provided
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
     # create a build kit builder instance
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
    # build the container image and push it to Docker Hub with the name clockbox.
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/app:latest
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v1
  #     with:
  #       username: $DOCKERHUB_USERNAME
  #       password: $DOCKERHUB_TOKEN
  #   - name: Set permissions for private key
  #     run: |
  #       echo "${{ env.AWS_PRIVATE_KEY }}" > key.pem
  #       chmod 600 key.pem
  #   - name: Pull Docker image
  #     run: |
  #       ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@your-ec2-instance-ip 'sudo docker pull your-dockerhub-username/cddemo:latest'
  #   - name: Stop running container
  #     run: |
  #       ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@your-ec2-instance-ip 'sudo docker stop cddemo || true'
  #       ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@your-ec2-instance-ip 'sudo docker rm cddemo || true'
  #   - name: Run new container
  #     run: |
  #       ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@your-ec2-instance-ip 'sudo docker run -d --name cddemo -p 80:3000 your-dockerhub-username/cddemo:latest'
